frequenci=n_distinct(InvoiceNo), monitery= sum(total_dolar)/n_distinct(InvoiceNo),
CustomerID=7)
summary(df_RFM)
structure(df_RFM)
df_RFM <- df_data %>%
group_by(Country) %>%
summarise(recency=as.numeric(as.Date("2012-01-01")-max(InvoiceDate)),
frequenci=n_distinct(InvoiceNo), monitery= sum(total_dolar)/n_distinct(InvoiceNo),
CustomerID=)
df_RFM <- df_data %>%
group_by(Country) %>%
summarise(recency=as.numeric(as.Date("2012-01-01")-max(InvoiceDate)),
frequenci=n_distinct(InvoiceNo), monitery= sum(total_dolar)/n_distinct(InvoiceNo),
CustomerID=7)
summary(df_RFM)
structure(df_RFM)
df_RFM <- df_data %>%
group_by(CustomerID) %>%
summarise(recency=as.numeric(as.Date("2012-01-01")-max(InvoiceDate)),
frequenci=n_distinct(InvoiceNo), monitery= sum(total_dolar)/n_distinct(InvoiceNo),
CustomerID=7)
summary(df_RFM)
structure(df_RFM)
library(plyr)
ddply(df_RFM, ~q_rec, summarise, mean=mean(monitery), sd=sd(monitery))
detach(package:plyr)
df_RFM <- df_data %>%
group_by(CustomerID) %>%
summarise(recency=as.numeric(as.Date("2012-01-01")-max(InvoiceDate)),
frequenci=n_distinct(InvoiceNo), monitery= sum(total_dolar)/n_distinct(InvoiceNo),
CustomerID=7)
detach(package:plyr)
detach(package:deplyr)
detach(plyr)
df_RFM <- df_data %>%
dplyr::group_by(CustomerID) %>%
dplyr::summarise(recency=as.numeric(as.Date("2012-01-01")-max(InvoiceDate)),
frequenci=n_distinct(InvoiceNo), monitery= sum(total_dolar)/n_distinct(InvoiceNo))
summary(df_RFM)
structure(df_RFM)
hist(df_RFM$recency)
hist(df_RFM$frequenci, breaks = 50)
df_RFM_Hurdle <- df_RFM[df_RFM$frequenci > 1,]
df_RFM$q_rec <- ntile(df_RFM$frequenci,4)  # part of the dplyr library
df_RFM <- df_RFM[order(df_RFM$q_rec),]     # sorting the cut rows of the RFM
# f1 <- function(x) c(Mean = mean(x), Max = max(x), SD = sd(x))
df_RFM_grouppty <- aggregate(df_RFM[,c("monitery","recency")],list(df_RFM$q_rec), mean)
library(plyr)
ddply(df_RFM, ~q_rec, summarise, mean=mean(monitery), sd=sd(monitery))
library("rattle", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("rattle.data", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
rattle()
rm(ls=list())
library(readxl)
ActualRatings_weeklyGRP <- read_excel("/mnt/409602D09602C67E/Files/Documents/Mtech_KE/istba/ca/time_series/ActualRatings_weeklyGRP.xls")
View(ActualRatings_weeklyGRP)
library(readr)
rating <- read_csv("development/mtech/testR/rating.csv",
col_names = FALSE, col_types = cols(`17-Jun-2007 (25)` = col_date(format = "%dd-%mmm-%YYY")))
View(rating)
rating
rating_series <- ts(rating)
rating_series
rating["x2"]
rating["X2"]
rating_series <- ts(rating["X2"])
rating_series
rating_series <- ts(rating["X2"],frequency=52, start=c(2007,25))
rating_series
plotplot.ts(rating_series)
plot.ts(rating_series)
log_rating_series <- log(rating_series)
plot.ts(log_rating_series)
library("TTR")
install.packages("TTR")
library("TTR")
library("TTR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
rating_SMA <- SMA(rating_series,n=3)
install.packages("lattice")
library("lattice", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("TTR")
library("TTR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
detach("package:TTR", unload=TRUE)
library("TTR", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
detach("package:TTR", unload=TRUE)
install.packages(c("BH", "bindr", "bindrcpp", "cairoDevice", "car", "caTools", "CircStats", "curl", "data.table", "digest", "dotCall64", "dplyr", "dtw", "e1071", "evaluate", "fields", "Formula", "fpc", "ggplot2", "git2r", "glue", "gss", "gtools", "highr", "hms", "htmlTable", "htmlwidgets", "httpuv", "kernlab", "knitr", "lme4", "lmtest", "lubridate", "maps", "mclust", "mice", "modeltools", "munsell", "mvtnorm", "NeuralNetTools", "openssl", "pillar", "pkgconfig", "plogr", "pROC", "proxy", "purrr", "quantmod", "quantreg", "randomForest", "rattle", "Rcpp", "RCurl", "readxl", "RGtk2", "rlang", "rmarkdown", "robustbase", "rpart.plot", "scales", "shiny", "sourcetools", "sp", "spam", "stringi", "stringr", "tidyr", "tidyselect", "timeDate", "trimcluster", "TTR", "utf8", "viridis", "viridisLite", "withr", "XML", "xtable", "xts", "yaml", "zoo"))
require(TTR)
rating_SMA <- SMA(rating_series,n=3)
plot.ts(rating_SMA)
rating_SMA <- SMA(rating_series,n=8)
plot.ts(rating_SMA)
rating_SMA <- SMA(rating_series,n=20)
plot.ts(rating_SMA)
rating_SMA <- SMA(rating_series,n=2)
plot.ts(rating_SMA)
rating_SMA <- SMA(rating_series,n=10)
plot.ts(rating_SMA)
install.packages("prophet")
library("prophet", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
m <- prophet(rating_series)
prophet(rating_series)
rating_series
typeof(rating_series)
rating_series[1:10]
typeof(rating_series[1:10])
typeof(rating)
prophet(rating)
library(readr)
rating <- read_csv("development/mtech/testR/rating.csv",
col_names = FALSE, col_types = cols(X1 = col_skip(),
X3 = col_date(format = "%m/%d/%Y")))
View(rating)
rating
rating_p= new list()
rating_p["ds"]<- rating["X3"]
rating_p<- rating
rating_p["ds"]<- rating["X3"]
rating_p["y"]<- rating["X2"]
rating_p
prophet(rating_p)
prophet(rating_p,weekly.seasonality=TRUE)
m <- prophet(rating_p,weekly.seasonality=TRUE,yearly.seasonality=TRUE)
m
typeof(m)
future <- make_future_dataframe(m, periods = 52)
future
m <- prophet(rating_p[1:72],weekly.seasonality=TRUE,yearly.seasonality=TRUE)
rating_p[1:72]
rating_p[1:4]
rating_p[:,1:72]
rating_p[:][1:72]
rating_p[1:2]
rating_p[3:4]
rating_p[3:4][1:10]
typeof(rating_p)
rating_p["ds"][1:72]
rating_p["ds"](1:72)
library("dplyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
rating_p[3:4,1:10]
typeof(rating_p)
rating_p <- df()
rating_p <- data.frame()
rating_p
rating_p["ds"]<- rating["X4"]
rating_p["ds"]<- rating["X3"]
rating_p
library(readr)
rating <- read_csv("development/mtech/testR/rating.csv",
col_names = FALSE, col_types = cols(X1 = col_skip(),
X3 = col_date(format = "%m/%d/%Y")))
View(rating)
View(rating)
View(rating)
rating["X2"]
rating[1]
rating[[1:72]]
rating[[1]]
rating[[2]]
rating[[1]][1:72]
typeof(rating[[1]][1:72])
rating_p["y"] <- rating[[1]][1:72]
rating_p["d"] <- rating[[1]][1:72]
rating_p <- data.frame()
rating_p["y"] <- rating[[1]][1:72]
rating_p <- rating[[1]][1:72]
View(rating_p)
rating_p <- rating[[1]][1:72]
typeof(rating_p)
rating_p <- data.frame(a,b)
rating_p <- data.frame(row.names = ["ds","y"])
rating_p <- data.frame(row.names = c("ds","y")
)
rating_p <- data.frame(column.names = c("ds","y"))
rating_p <- data.frame(ds=rating[[1]][1:72])
rating_p <- data.frame(ds=rating[[1]][1:72],y=rating[[2]][1:72])
rating_train <- data.frame(ds=rating[[1]][1:72],y=rating[[2]][1:72])
View(rating_train)
rating_train <- data.frame(ds=rating[[2]][1:72],y=rating[[1]][1:72])
rating_test <- data.frame(ds=rating[[2]][72:92],y=rating[[1]][72:92])
View(rating_test)
m <- prophet(rating_train)
m <- prophet(rating_train,yearly.seasonality=TRUE,weekly.seasonality=TRUE)
m
future <- make_future_dataframe(m,periods = 20,freq = 'week')
future
View(future)
forecast <- predict(m, future)
tail(forecast[c('ds', 'yhat', 'yhat_lower', 'yhat_upper')])
typeof(rating_train)
typeof(m)
typeof(future)
typeof(forecast)
plot(m,forecast)
prophet_plot_components(m, forecast)
dyplot.prophet(m, forecast)
View(forecast)
prophet_plot_components(m, forecast)
tail(forecast[c('yhat')])
forecast[c('yhat')]
forecast[c('yhat')][72:92]
forecast[[1]]
forecast[c('yhat')]
forecast[c('yhat')[1:72]]
forecast[c('yhat')[1:72]]
forecast[c('yhat')
]
rating_p
rating
test <- decompose(rating)
rating_series
test <- decompose(rating_series)
plot.ts(rating_series)
plot.ts(rating)
rm(rating_test)
rating_test <- data.frame(ds=rating[[2]][72:92],y=rating[[1]][72:92])
View(rating_test)
View(rating_train)
forecast[c('yhat')]
type(forecast[c('yhat')])
typeof(forecast[c('yhat')])
forecast[[c('yhat')]}
forecast[[c('yhat')]]
forecast[[c('yhat')]][72:92]
forecast[[c('yhat')]][72:92]
rating_test
rating_test["y"]
rating_test["y"]-forecast[[c('yhat')]][72:92]
MAPE(rating_test["y"],forecast[[c('yhat')]][72:92])
rowMeans(abs((rating_test["y"]-forecast[[c('yhat')]][72:92]))/rating_test["y"]) * 100)
rowMeans(((abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))/rating_test["y"]) * 100)
((abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))/rating_test["y"]) * 100
mean(((abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))/rating_test["y"]) * 100)
((abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))/rating_test["y"]) * 100
(abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))/rating_test["y"]
sum((abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))/rating_test["y"])
sum((abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))/rating_test["y"])*100/21
(rating_test["y"]-forecast[[c('yhat')]][72:92])^2
sum(abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))/21
sum((abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))/rating_test["y"])*100/21
View(rating)
dummy <- ts(rating["X2"],frequency=12, start=c(2007,1))
dummy
dummy<-decompose(dummy)
plot(dummy)
dummy
View(dummy)
dummy[["x"]]
dummy[["seasonal"]]
rm(dummy)
rm(survey,Survey_2_14_2)
View(result)
rm(result)
View(rating_train)
View(rating_test)
View(rating_p)
View(rating_p)
View(rating_train)
rm(rating_p)
View(rating)
rating_test <- data.frame(ds=rating[[2]][:],y=rating[[1]][:])
rating_test <- data.frame(ds=rating[[2]],y=rating[[1]])
rating_test <- data.frame(ds=rating[[2]][72:92],y=rating[[1]][72:92])
rating_temp <- data.frame(ds=rating[[2]],y=rating[[1]])
View(rating_temp)
m <- prophet(rating_train,yearly.seasonality=TRUE)
m <- prophet(rating_train,yearly.seasonality=TRUE,weekly.seasonality=TRUE)
m_temp <- prophet(rating_temp,yearly.seasonality=TRUE)
future_temp <- make_future_dataframe(m_temp,periods = 10,freq = 'week')
forecast_temp <- predict(m_temp, future_temp)
forecast_temp[c("yhat")]
future_temp <- make_future_dataframe(m_temp,periods = 20,freq = 'week')
forecast_temp <- predict(m_temp, future_temp)
forecast_temp[c("yhat")]
rating_series_temp<-ts(forecast_temp[c("yhat")],frequency=52, start=c(2007,25))
rating_series_temp
dummy<-decompose(rating_series_temp)
plot(dummy)
plot.ts(dummy["seasonal"])
View(dummy)
plot(dummy["seasonal"])
dummy["seasonal"]
dummy[["trend"]]
dummy[["random"]]
sum((abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))/rating_test["y"])*100/21
sum(abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))*1/21
length(rating_test)
length(rating_test["y"])
rating_test["y"]
length(rating_test["y"][0])
length(rating_test["y"])
rating_test["y"][:]
rating_test["y"][0:]
rating_test["y"]
length(rating_test[["y"]])
mape<-sum((abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))/
rating_test["y"])*100/length(rating_test[["y"]])
)
sum((abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))/
rating_test["y"])*100/length(rating_test[["y"]])
rm(mape,forecast_temp,future_temp,m_temp,rating_temp,rating_series_temp)
rm(dummy)
source('~/development/mtech/testR/time_series.R')
View(forecast)
source('~/development/mtech/Time_series/time_series.R')
sum((abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))/
rating_test["y"])*100/length(rating_test[["y"]])
source('~/development/mtech/Time_series/time_series.R')
source('~/development/mtech/Time_series/time_series.R')
source('~/development/mtech/Time_series/time_series.R')
source('~/development/mtech/Time_series/time_series.R')
source('~/development/mtech/Time_series/time_series.R')
save.image("~/development/mtech/Time_series/time_series.RData")
load("/home/kenny/development/mtech/Time_series/time_series.RData")
sum((abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))/
rating_test["y"])*100/length(rating_test[["y"]])
plot(m, forecast)
prophet_plot_components(m, forecast)
dyplot.prophet(m, forecast)
View(rating)
sum((abs(rating["X2"]-forecast[[c('yhat')]]))/
rating["X2"])*100/length(rating[["X2"]])
sum((abs(rating["X2"]-forecast[[c('yhat')]])))*1/length(rating[["X2"]])
dyplot.prophet(rating["X2"], forecast)
rating["X2"]
View(m)
m[["weekly.seasonality"]]
m[["weekly.seasonality"]]=FALSE
m[["weekly.seasonality"]]
m[["daily.seasonality"]]
prophet_plot_components(m, forecast)
m <- prophet(rating_train,yearly.seasonality=TRUE)
future <- make_future_dataframe(m,periods = 20,freq = 'week')
forecast <- predict(m, future)
sum((abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))/
rating_test["y"])*100/length(rating_test[["y"]])
sum(abs(rating_test["y"]-forecast[[c('yhat')]][72:92]))*1/21
plot(m, forecast)
prophet_plot_components(m, forecast)
plot(m, forecast)
sum((abs(rating["X2"]-forecast[[c('yhat')]]))/
+         rating["X2"])*100/length(rating[["X2"]])
View(m)
View(rating)
c(1,93)
c(1:93)
c(1:92)
rating["X4"]<-c(1:92)
lm()
trend<-lm(x=rating["X4"],y=rating["X2"])
trend<-lm(data=rating,x=rating["X4"],y=rating["X2"])
trend<-lm(data=rating,x=rating[["X4"]],y=rating[["X2"]])
trend<-lm(data=rating["X4","X2"])
rating["X4","X2"]
rating[c("X4","X2")]
typeof(rating[c("X4","X2")])
typeof(rating[c("X4","X2")])
lm(data=(rating[c("X4","X2")]))
lm(formula = X2 ~ X4,data=(rating[c("X4","X2")]))
pred=297.514-1.219*rating["X4"]
sum(abs(pred-rating["X2"])/rating["X2"])*100/92
plot(pred)
plot(pred,rating["X2"])
typeof(pred)
View(pred)
typeof(pred,c(1:92))
plot(pred,c(1:92))
plot(x=c(1:92),y=pred)
plot(x=c(1:92),y=pred["X4"])
plot(x=c(1:92),y=pred[["X4"]])
rating_train["X4"]<-c(1:92)
rating_train["X4"]<-c(1:72)
View(rating_train)
trend<-lm(formula = y ~ X4,data=(rating_train[c("X4","y")]))
View(trend)
lm(formula = y ~ X4,data=(rating_train[c("X4","y")]))
pred<-302.8-1.4*rating["X4"]
sum(abs(pred-rating["X2"])/rating["X2"])*100/92
View(pred)
rm(pred)
pred<-302.8-1.4*rating["X4"]
sum(abs(pred-rating["X2"])/rating["X2"])*100/92
sum(abs(pred[72:92]-rating_test["X2"])/rating_test["X2"])*100/21
View(rating_test)
sum(abs(pred[72:92]-rating_test["y"])/rating_test["y"])*100/21
pred[72:92]
pred[[72:92]]
View(pred)
sum(abs(pred["X2"][72:92]-rating_test["y"])/rating_test["y"])*100/21
pred["X2"][72:92]
pred[["X2"]][72:92]
pred[["X2"]]
pred["X2"]
View(pred)
pred[["X4"]][72:92]
sum(abs(pred["X4"][72:92]-rating_test["y"])/rating_test["y"])*100/21
sum(abs(pred[["X4"]][72:92]-rating_test["y"])/rating_test["y"])*100/21
summary(trend)
sapply(rating_train, class)
View(rating_train)
View(rating)
rating["month"]<-month.name(rating["X3"])
rating["month"]<-month(rating["X3"])
library("lubridate", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
rating["month"]<-month(rating["X3"])
rating["month"]<-month(rating[["X3"]])
View(rating)
View(rating)
View(rating)
month(rating[["X3"]])
rating[["X3"]]
typeof(rating[["X3"]][0])
typeof(rating[["X3"]][0])
as.POSIXlt(rating[["X3"]][0], format="%m/%d/%Y"))
as.POSIXlt(rating[["X3"]][0], format="%m/%d/%Y")
month(as.POSIXlt(rating[["X3"]][0], format="%m/%d/%Y"))
month(as.POSIXlt(rating[["X3"]], format="%m/%d/%Y"))
month.name(as.POSIXlt(rating[["X3"]], format="%m/%d/%Y"))
months(as.POSIXlt(rating[["X3"]], format="%m/%d/%Y"))
rating["month"]<-months(as.POSIXlt(rating[["X3"]], format="%m/%d/%Y"))
View(rating)
lm(rating$X2[] ~ rating+Month, data=data)
rating$X2[1:72]
dummies<-lm(rating$X2[1:72] ~ rating$X4[1:72]+rating$month[1:72], data=rating)
dummies
View(dummies)
dummies
summary(dummies)
dummies$fitted.values
res <- residuals(dummies)
plot(jitter(res)~jitter(newY), ylab="Residuals", xlab="Y", data=data)
abline(0,0)
plot(jitter(res)~jitter(newY), ylab="Residuals", xlab="Y", data=data)
abline(0,0)
plot(jitter(res)~jitter(newY), ylab="Residuals", xlab="Y", data=data)
pacman::p_load(tidyverse, lubridate,zoo,forecast, fUnitRoots)
library("zoo", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("forecast")
library("forecast", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
accuracy(dummies)
predict(dummies,rating)
dummies$fitted.values
predict(dummies,rating$X4+rating$month)
predict(dummies,newdata = rating)
predict(dummies)
predict(dummies,newdata = data.frame(X4=rating$X4,month=rating$month))
predict(dummies,newdata = data.frame(X4=2,month="June"))
View(dummies)
predict(dummies,newdata = data.frame(X4=2,month=["June"]))
predict(dummies,newdata = data.frame(rating$X4=2,rating$month="June"))
predict(dummies,newdata = data.frame("rating$X4"=2,"rating$month"="June"))
predict(dummies,newdata = data.frame("rating$X4[1:72]"=2,"rating$month[1:72]"="June"))
dummies<-lm(rating$X2[1:72] ~ rating$X4[1:72]+rating$month[1:72], data=rating)
View(dummies)
dummies
View(rating_train)
rating_train["month"]<-months(as.POSIXlt(rating_train[["ds"]], format="%m/%d/%Y"))
dummies<-lm(rating_train$y ~ rating_train$X4+rating_train$month, data=rating_train)
dummies
summary(dummies)
accuracy(dummies)
rating_test["month"]<-months(as.POSIXlt(rating_test[["ds"]], format="%m/%d/%Y"))
View(rating_test)
rating_test["X4"]<-c(72:92)
View(rating_test)
View(rating_train)
rating_test["X4"]<-c(73:93)
View(rating_test)
View(rating_test)
rating_test["X4"]<-c(72:92)
predict(dummies,newdata = data.frame("rating_train$X4"=2,"rating_train$month"="June"))
predict(dummies,newdata = rating)
predict(dummies,newdata = rating_test)
View(rating_test)
dummies<-lm(rating$X2 ~ rating$X4+rating$month, data=rating)
accuracy(dummies)
rating["predicted"]<-dummies$fitted.values
View(rating)
ggplot(rating, aes(X4)) +
geom_line(aes(y =X2, colour = "var0")) +
geom_line(aes(y = predicted, colour = "var1"))
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
ggplot(rating, aes(X4)) +
geom_line(aes(y =X2, colour = "var0")) +
geom_line(aes(y = predicted, colour = "var1"))
ggplot(rating, aes(X4)) +
geom_line(aes(y =X2, colour = "actual")) +
geom_line(aes(y = predicted, colour = "predicted"))
ggplot(rating, aes(X3)) +
geom_line(aes(y =X2, colour = "actual")) +
geom_line(aes(y = predicted, colour = "predicted"))
ls()
rm(list=ls())
setwd("/mnt/409602D09602C67E/Files/Documents/Mtech_KE/web_analytics/barry")
library("rattle", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
rattle()
install.packages("KernSmooth")
install.packages("seriation")
install.packages("arulesViz")
library(arulesSequences)
install.packages("arulesSequences")
library(arulesSequences)
data <- read_baskets(con = "./msnbc-seqformat-sample.txt", info = c("sequenceID","eventID","SIZE"))
data <- read_baskets(con = "./demo_code_data/msnbc-seqformat-sample.txt", info = c("sequenceID","eventID","SIZE"))
View(data)
data
data@itemInfo[["labels"]]
as(head(data), "data.frame")
seqs <- cspade(data, parameter = list(support = 0.1), control = list(verbose = TRUE))
as(seqs,"data.frame")  # view the sequences
rules <- ruleInduction(seqs, confidence = 0.5,control = list(verbose = TRUE))
as(rules,"data.frame")  # view the rules
View(seqs)
